[{"path":"https://shrektan.github.io/fcl/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 fcl authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://shrektan.github.io/fcl/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Xianying Tan. Author, maintainer. Raymon Mina. Contributor.            find_root.rs, xirr.rs Hiroaki Yutani. Contributor.            configure, configure.win, tools/configure.R","code":""},{"path":"https://shrektan.github.io/fcl/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tan X (2022). fcl: Financial Calculator. https://github.com/shrektan/fcl, https://shrektan.github.io/fcl/.","code":"@Manual{,   title = {fcl: Financial Calculator},   author = {Xianying Tan},   year = {2022},   note = {https://github.com/shrektan/fcl, https://shrektan.github.io/fcl/}, }"},{"path":"https://shrektan.github.io/fcl/index.html","id":"fcl","dir":"","previous_headings":"","what":"Financial Calculator","title":"Financial Calculator","text":"financial calculator written Rust. provides simple calculations bond YTM, Duration, etc.","code":""},{"path":"https://shrektan.github.io/fcl/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Financial Calculator","text":"’ll need rust toolchain compile package source.","code":""},{"path":"https://shrektan.github.io/fcl/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Financial Calculator","text":"","code":"library(fcl) ## basic example code bond <- fixed_bond(   value_date = 210101,   mty_date = c(250101, 300201),   redem_value = 100,   cpn_rate = c(0.05, 0.03),   cpn_freq = c(0, 1) ) bond$ytm_dur(   ref_date = c(220101, 220201),   clean_price = 100 ) #>          YTM     MACD     MODD #> 1 0.04552728 3.000000 2.869366 #> 2 0.02999755 7.212793 7.002728 bond$cf(   ref_date = c(220101, 220131) ) #>    ID       DATE     COUPON REDEM #> 1   1 2025-01-01 20.0000000   100 #> 2   2 2023-01-01  3.0000000     0 #> 3   2 2024-01-01  3.0000000     0 #> 4   2 2025-01-01  3.0000000     0 #> 5   2 2026-01-01  3.0000000     0 #> 6   2 2027-01-01  3.0000000     0 #> 7   2 2028-01-01  3.0000000     0 #> 8   2 2029-01-01  3.0000000     0 #> 9   2 2030-01-01  3.0000000     0 #> 10  2 2030-02-01  0.2547945   100  rtn <- make_rtn(date = c(210101, 210105, 210110), mv = c(100, 123, 140), pl = c(0, 3, 7)) rtn$twrr_cr(210102, 210110) #>                  [,1] #> 2021-01-02 0.00000000 #> 2021-01-03 0.00000000 #> 2021-01-04 0.00000000 #> 2021-01-05 0.02500000 #> 2021-01-06 0.02500000 #> 2021-01-07 0.02500000 #> 2021-01-08 0.02500000 #> 2021-01-09 0.02500000 #> 2021-01-10 0.07894737 rtn$twrr_dr(210102, 210110) #>                  [,1] #> 2021-01-02 0.00000000 #> 2021-01-03 0.00000000 #> 2021-01-04 0.00000000 #> 2021-01-05 0.02500000 #> 2021-01-06 0.00000000 #> 2021-01-07 0.00000000 #> 2021-01-08 0.00000000 #> 2021-01-09 0.00000000 #> 2021-01-10 0.05263158 rtn$dietz(210102, 210110) #>                  [,1] #> 2021-01-02 0.00000000 #> 2021-01-03 0.00000000 #> 2021-01-04 0.00000000 #> 2021-01-05 0.02857143 #> 2021-01-06 0.02777778 #> 2021-01-07 0.02727273 #> 2021-01-08 0.02692308 #> 2021-01-09 0.02666667 #> 2021-01-10 0.08737864 rtn$dietz_avc(210102, 210110) #>                [,1] #> 2021-01-02 100.0000 #> 2021-01-03 100.0000 #> 2021-01-04 100.0000 #> 2021-01-05 105.0000 #> 2021-01-06 108.0000 #> 2021-01-07 110.0000 #> 2021-01-08 111.4286 #> 2021-01-09 112.5000 #> 2021-01-10 114.4444"},{"path":"https://shrektan.github.io/fcl/reference/fixed_bond.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Fixed Bond Object — fixed_bond","title":"Create Fixed Bond Object — fixed_bond","text":"Create Fixed Bond Object","code":""},{"path":"https://shrektan.github.io/fcl/reference/fixed_bond.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Fixed Bond Object — fixed_bond","text":"","code":"fixed_bond(value_date, mty_date, redem_value, cpn_rate, cpn_freq)"},{"path":"https://shrektan.github.io/fcl/reference/fixed_bond.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Fixed Bond Object — fixed_bond","text":"value_date, mty_date value maturity date bond redem_value, cpn_rate, cpn_freq redemption value, coupon rate coupon frequency bond. Note frequency can one 1, 2, 4, 0 (pay mature)","code":""},{"path":"https://shrektan.github.io/fcl/reference/fixed_bond.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Fixed Bond Object — fixed_bond","text":"returns environment containing following objects: .self: external pointer Rust object. len(): function returns length internal bonds object. ytm_dur(ref_date, clean_price): function returns data.frame, three columns, YTM, MODD MACD. cf(ref_date): function returns schedualed bond cashflows, xts format.","code":""},{"path":"https://shrektan.github.io/fcl/reference/fixed_bond.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create Fixed Bond Object — fixed_bond","text":"arguments must length 1. date input converted Date object via ymd::ymd(). take day count convention account now. support business day calendar. dates cashflow projection days next months (see ymd::edate()). considers different days month weekend date adjustment. YTM value cashflow's IRR value. Thus, equal Excel's Yield value, adjusted using formula \\(YTM (fcl) = (1 + frac{Yield (Excel)}{n})^n - 1\\), n coupon payment frequency, remaining life bond larger 1. bond going mature within one year, \\(Yield (Excel) = frac{Cashflow}{Price} - 1\\).","code":""},{"path":"https://shrektan.github.io/fcl/reference/fixed_bond.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Fixed Bond Object — fixed_bond","text":"","code":"bond <- fixed_bond(   value_date = 210101,   mty_date = c(250101, 300201),   redem_value = 100,   cpn_rate = c(0.05, 0.03),   cpn_freq = c(0, 1) ) bond$ytm_dur(   ref_date = c(220101, 220201),   clean_price = 100 ) #>          YTM     MACD     MODD #> 1 0.04552728 3.000000 2.869366 #> 2 0.02999755 7.212793 7.002728 bond$cf(   ref_date = c(220101, 220131) ) #>    ID       DATE     COUPON REDEM #> 1   1 2025-01-01 20.0000000   100 #> 2   2 2023-01-01  3.0000000     0 #> 3   2 2024-01-01  3.0000000     0 #> 4   2 2025-01-01  3.0000000     0 #> 5   2 2026-01-01  3.0000000     0 #> 6   2 2027-01-01  3.0000000     0 #> 7   2 2028-01-01  3.0000000     0 #> 8   2 2029-01-01  3.0000000     0 #> 9   2 2030-01-01  3.0000000     0 #> 10  2 2030-02-01  0.2547945   100"},{"path":"https://shrektan.github.io/fcl/reference/make_rtn.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Rtn Object — make_rtn","title":"Create Rtn Object — make_rtn","text":"providing \"group\" (ids) dates, mvs pls, calucating time-weighted rate rtn (twrr) modified dietz rate return (dietz).","code":""},{"path":"https://shrektan.github.io/fcl/reference/make_rtn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Rtn Object — make_rtn","text":"","code":"make_rtn(date, mv, pl, id = 1L)"},{"path":"https://shrektan.github.io/fcl/reference/make_rtn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Rtn Object — make_rtn","text":"date Date vector, reference date row mv, pl double vector, market value PnL day id integer vector, ID row belongs ","code":""},{"path":"https://shrektan.github.io/fcl/reference/make_rtn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Rtn Object — make_rtn","text":"list functions, signature , id, allowed accept scalar. return xts object one column. twrr_cr: cumulative time weighted return twrr_dr: daily time weighted return dietz: Modified Dietz Return dietz_avc: denominator used calculate Modified Dietz Return cum_pl: cumulative PnL","code":""},{"path":"https://shrektan.github.io/fcl/reference/make_rtn.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create Rtn Object — make_rtn","text":"input vector must 1 length.","code":""},{"path":"https://shrektan.github.io/fcl/reference/make_rtn.html","id":"cash-flow-handling","dir":"Reference","previous_headings":"","what":"Cash flow handling","title":"Create Rtn Object — make_rtn","text":"cash flow provided externally. Instead, deducted via market value PnL, equation \\(\\Delta MV = \\Delta PnL + CF\\). cash inflow treating happens beginning day, cash outflow end day. reasons two. first reduce possibility close--zero denominator. second cash usually usable whole day. calculation based calendar days. business calendar weekday considers. change calculation frequency, either. However, possible future version.","code":""},{"path":"https://shrektan.github.io/fcl/reference/make_rtn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create Rtn Object — make_rtn","text":"Modified Dietz Method: https://en.wikipedia.org/wiki/Modified_Dietz_method Time weighed Return: https://en.wikipedia.org/wiki/Time-weighted_return","code":""},{"path":"https://shrektan.github.io/fcl/reference/make_rtn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Rtn Object — make_rtn","text":"","code":"rtn <- make_rtn(date = c(210101, 210105, 210110), mv = c(100, 123, 140), pl = c(0, 3, 7)) rtn$twrr_cr(210102, 210110) #>                  [,1] #> 2021-01-02 0.00000000 #> 2021-01-03 0.00000000 #> 2021-01-04 0.00000000 #> 2021-01-05 0.02500000 #> 2021-01-06 0.02500000 #> 2021-01-07 0.02500000 #> 2021-01-08 0.02500000 #> 2021-01-09 0.02500000 #> 2021-01-10 0.07894737 rtn$twrr_dr(210102, 210110) #>                  [,1] #> 2021-01-02 0.00000000 #> 2021-01-03 0.00000000 #> 2021-01-04 0.00000000 #> 2021-01-05 0.02500000 #> 2021-01-06 0.00000000 #> 2021-01-07 0.00000000 #> 2021-01-08 0.00000000 #> 2021-01-09 0.00000000 #> 2021-01-10 0.05263158 rtn$dietz(210102, 210110) #>                  [,1] #> 2021-01-02 0.00000000 #> 2021-01-03 0.00000000 #> 2021-01-04 0.00000000 #> 2021-01-05 0.02857143 #> 2021-01-06 0.02777778 #> 2021-01-07 0.02727273 #> 2021-01-08 0.02692308 #> 2021-01-09 0.02666667 #> 2021-01-10 0.08737864 rtn$dietz_avc(210102, 210110) #>                [,1] #> 2021-01-02 100.0000 #> 2021-01-03 100.0000 #> 2021-01-04 100.0000 #> 2021-01-05 105.0000 #> 2021-01-06 108.0000 #> 2021-01-07 110.0000 #> 2021-01-08 111.4286 #> 2021-01-09 112.5000 #> 2021-01-10 114.4444"},{"path":"https://shrektan.github.io/fcl/news/index.html","id":"fcl-010","dir":"Changelog","previous_headings":"","what":"fcl 0.1.0","title":"fcl 0.1.0","text":"Added NEWS.md file track changes package. bond_result() supports vector inputs. bond_result() try return NA unexpected input failing calulcate irr. Implement bond_cf() give forecasting cashflows bond. Implement rtn() allows fast TWRR Modified Return. Better handle case deno zero, return calculation. Dietz return now uses day count handling TWRR, assuming positive cash flow occurs BOP day negative cash flow occurs EOP. Use fixed_bond() create bond objects $cf() $ytm_dur() methods.","code":""}]
